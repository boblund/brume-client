"use strict";

const fileWatcher = require('chokidar')
      , {statSync, promises: {utimes}} = require('fs')
      , log = require('./logger.js')
      , NetworkEvents = require('./networkEvents.js')

function FileWatcher({dir, options, baseDir, groupInfo, thisUser, fileData, networkEvents}) {

  function initAddHandler(path, stats) {
    let p = path.split('/')
    if((p.length == 3 && p[2] == '.members') || !path.match(/(^|[\/])\./)) {
      fileData.set(path, {mod: stats.mtime.toISOString()})
      fileData.setSync(path, false)
      log.debug(`fileData ${path} ${JSON.stringify(fileData.get(path))}`)
    }
  }

  const watcher = fileWatcher.watch(dir, options)
  
  this.close = watcher.close

  watcher
    .on('add', initAddHandler)
    .on('ready', () => {
      let utimesEvents = new NetworkEvents;
      watcher
        .removeListener('add', initAddHandler)
        .on('all', async (event, path) => {
          log.info('file event', event, path)
          if(utimesEvents.remove({action: event, file: path}) > -1) {
            log.debug('utimesEvent', event, path)
            return
          }

          let p = path.split('/')
              ,cmd = {action: event, file: path}

          // ignore all .dotfiles except user/group/.members
          if(path.match(/(^|[\/])\./)) {
            if(p.length == 3 && p[2] == '.members' && p[0] == thisUser) {
              groupInfo.updateMembers(p[0], p[1], cmd.action)
            }
          }

          switch(event) {
            case 'add':
            case 'change':
              if(networkEvents.remove(cmd) == -1) {
                utimesEvents(cmd)
              } else {
                log.debug('networkEvent', event, path)

                try {
                  utimesEvents.add({action: 'change', file: path})
                  let date = new Date(fileData.get(path).mod)
                  await utimes(baseDir+path, date, date)
                } catch (e) {
                  log.error(`watcher serror ${path} ${e.message}`)
                }
              }
  
              break
    
            case 'unlink':
              fileData.delete(path)
              if(networkEvents.remove(cmd) == -1) {
                // unlink generated by local user
                if(p[2] == '.members') cmd.dest = p[0]  // only send unlink .members to group owner
                brume.eventQueue.push(cmd)
              } else {
                log.debug('networkEvent', event, path)
              }
              
              break
    
            case 'addDir':
              if(p.length == 2) {
                groupInfo.addGroup(p[0], p[1])
                if(p[0] != thisUser) {
                  //groupInfo.sendSync(p[0], p[1])
                  groupInfo.sync(p[0], p[1])
                }
              } 
              break
    
            case 'unlinkDir':
              p = path.split('/')
              if(p.length ==2 && p[0] != thisUser) {
                groupInfo.rmGroup(p[0], p[1])
              }
          }
        })
      })
}

module.exports = FileWatcher
