"use strict";

const fileWatcher = require('chokidar')
      , {statSync, promises: {utimes}} = require('fs')

function initAddHandler(path, stats) {
  let p = path.split('/')
  if((p.length == 3 && p[2] == '.members') || !path.match(/(^|[\/])\./)) {
    brume.fileData.set(path, {mod: stats.mtime.toISOString()})
    brume.fileData.setSync(path, false)
    log.debug(`fileData ${path} ${JSON.stringify(brume.fileData.get(path))}`)
  }
}

function FileWatcher({dir, options, groupInfo, thisUser}) {
  const watcher = fileWatcher.watch(dir, options)
  
  watcher
    .on('add', initAddHandler)
    .on('ready', () => {
      watcher
        .removeListener('add', initAddHandler)
        .on('all', async (event, path) => {
          log.info('file event', event, path)
          if(utimesEvents.remove({action: event, file: path}) > -1) {
            log.debug('utimesEvent', event, path)
            return
          }

          let p = path.split('/')
              ,cmd = {action: event, file: path}

          // ignore all .dotfiles except user/group/.members
          if(path.match(/(^|[\/])\./)) {
            if(p.length == 3 && p[2] == '.members' && p[0] == thisUser) {
              groupInfo.updateMembers(p[0], p[1], cmd.action)
            }
          }

          switch(event) {
            case 'add':
            case 'change':
              if(brume.groupInfo.networkEvents.remove(cmd) == -1) {
                if(p[2] == '.members' && p[0] != thisUser) {
                  // member cannot add or change
                  return
                }

                cmd.pmod = event == 'change' ? brume.fileData.get(path).mod : 0
                cmd.mod = statSync(join(baseDir, path), {throwIfNoEntry: false}).mtime.toISOString()
                brume.fileData.set(cmd.file, {mod: cmd.mod})
                brume.fileData.setSync(cmd.file, false)
                brume.eventQueue.push(cmd)
              } else {
                log.debug('networkEvent', event, path)

                try {
                  utimesEvents.add({action: 'change', file: path})
                  let date = new Date(brume.fileData.get(path).mod)
                  await utimes(baseDir+path, date, date)
                } catch (e) {
                  log.error(`watcher serror ${path} ${e.message}`)
                }
              }
  
              break
    
            case 'unlink':
              brume.fileData.delete(path)
              if(brume.groupInfo.networkEvents.remove(cmd) == -1) {
                // unlink generated by local user
                if(p[2] == '.members') cmd.dest = p[0]  // only send unlink .members to group owner
                brume.eventQueue.push(cmd)
              } else {
                log.debug('networkEvent', event, path)
              }
              
              break
    
            case 'addDir':
              if(p.length == 2) {
                brume.groupInfo.addGroup(p[0], p[1])
                if(p[0] != thisUser) {
                  //brume.groupInfo.sendSync(p[0], p[1])
                  brume.groupInfo.sync(p[0], p[1])
                }
              } 
              break
    
            case 'unlinkDir':
              p = path.split('/')
              if(p.length ==2 && p[0] != thisUser) {
                brume.groupInfo.rmGroup(p[0], p[1])
              }
          }
        })
      })
}

module.exports = FileWatcher
